
#include "HLS/hls.h"
#include "assert.h"
#include "HLS/stdio.h"
#include <stdlib.h>
#define fraction 4
#define CLIP_8(a) (a > 127? 127:(a < -128 ? -128: a))
#define CLIP_16(a) (a >  32767?  32767:(a < -32768 ? -32768: a))
#define mul_8(a,b) CLIP_8((a*b)>>fraction)
#define mul_16(a,b) CLIP_16(((short int)a*(short int)b)>>fraction)
#define add_8(a,b) CLIP_8(a + b)
#define add_16(a,b) CLIP_16(a + b)

typedef ihc::mm_master<char, ihc::dwidth<16>,
 ihc::awidth<32>,
 ihc::aspace<1>,
 ihc::latency<0>,
 ihc::waitrequest<1>  > Master;

hls_avalon_slave_component component void convolution
(Master &input0,
 Master &kernel0, 
 Master &kernel1, 
 Master &output0,
 hls_avalon_slave_register_argument int o_c,
 hls_avalon_slave_register_argument int o_wh,
 hls_avalon_slave_register_argument int i_c,
 hls_avalon_slave_register_argument int i_wh,
 hls_avalon_slave_register_argument int S,
 hls_avalon_slave_register_argument int state) {
    short int tmp;
    int i, j, k, p, l, m;
	char* kernel;
	if(state==0){
			kernel=kernel0;
		}
		else{
			kernel=kernel1;
		}
    for (i = 0; i < o_wh; i++) {
        for (j = 0; j < o_wh; j++) {
            for (k = 0; k < o_c; k++) {
                tmp = 0;
                for (p = 0; p < i_c; p++) {
                    for (l = 0; l < 9; l++) {
                        for (m = 0; m < 9; m++) {
                            tmp = add_16(tmp, mul_16(input0[i_wh * i_wh * p + i_wh * (i * S + l) + (j * S + m)], kernel[k * 81 * i_c + p * 81 + l * 9 + m])); 
                        }
                    }
                }
                if(state){
                    output0[k * o_wh * o_wh + i * o_wh + j] = CLIP_8(tmp >> 7);
                } 
                else{
                    if(tmp < 0){
                        output0[k * o_wh * o_wh + i * o_wh + j] = 0;
                    }
                    else output0[k * o_wh * o_wh + i * o_wh + j] = CLIP_8(tmp);
                }   
            }
        }
    }
}
int main(){
   char mnist[784]={};
   char kernel[1296]={18, 15, 6, -3, -8, 2, 9, -4, 16, -18, 22, 22, 12, -2, 0, 0, -12, 11, -51, -3, -6, -6, 6, 8, 6, -3, 0, -1, -35, -45, -6, 7, 11, 7, 9, -3, 4, -25, 2, 3, 1, 5, -4, -6, -41, -53, 5, 3, -4, 1, 1, -9, -3, -36, -28, -18, -9, -3, 2, -4, -9, 14, -9, -1, -22, -22, -20, -11, -7, -8, 3, -14, 17, 4, 1, -8, -12, -23, -24, -6, -70, -11, -20, -5, 15, -1, -13, -12, 7, -30, 8, -25, -31, -16, 1, -2, 0, 13, -25, 6, -18, -43, -3, 11, 7, -4, 7, -7, -5, 12, -9, -11, 5, 2, 3, 8, 7, 0, 22, 9, 1, -6, 2, 7, 8, 10, -6, 22, 15, -8, -11, 9, 4, 3, 6, -21, -12, -21, -32, 6, 11, 3, -1, 2, -20, -23, -20, -15, -2, 5, 2, 1, -2, -31, 3, -6, -15, -9, -1, -1, -2, -7, -6, 15, 16, 21, 4, -4, -11, -4, -31, -63, -47, -56, -47, -47, -45, -51, -25, -7, -2, -3, -14, -11, -7, -3, -8, -14, -28, 7, 3, 10, 4, 6, 8, 9, -2, -25, -5, 0, 1, -1, -1, 4, 1, 11, -19, 1, 0, 0, -1, -2, -2, 2, 8, -13, -2, -2, -2, 0, -3, -4, -2, -6, -3, -2, -3, 0, 5, 4, 3, 2, -4, 8, 5, -4, -3, -4, -1, 2, 4, -2, 21, 2, -5, -8, -9, -20, -21, -25, -1, -13, 6, 5, 8, 5, -17, -30, -9, -5, -19, 4, -3, 8, 13, -56, -18, 4, -6, -15, 7, 3, 24, -9, -67, 23, 3, 1, -1, 6, 3, 22, -58, -44, 17, 9, 10, 4, 7, 2, 3, -47, -17, 1, 4, 6, 1, 10, -4, -15, -15, -6, -8, -12, -2, -12, -8, -21, -4, 4, 4, -6, -10, -5, -17, 14, 10, 11, 7, 6, 11, 10, 9, 10, 13, 9, 9, 0, -1, 0, -3, 4, 2, -5, 3, 3, 1, 2, -2, -2, 5, 6, -13, -9, -12, -1, 8, 6, -4, -1, -1, -4, 4, -5, 2, 7, 1, -2, -1, 2, 0, 8, -1, -4, -14, -11, -15, 0, -3, -20, -1, -8, -14, -17, -14, -22, -24, -28, -37, -26, -18, -7, -3, -1, -4, 0, -12, 7, -4, 2, 1, 7, 4, 6, 9, 6, 29, 15, 19, 11, 11, 12, 7, 7, 7, -33, 13, -12, -12, -5, -19, -17, -11, -14, -1, 2, -15, 1, 1, 2, -3, 9, -9, 2, -3, 3, 18, -11, -8, -4, 3, -12, -4, 0, 16, 1, -25, 15, 2, -2, -10, -2, 6, 4, -37, -7, 21, -10, -15, 4, 2, 18, -12, -25, 12, 14, -22, -2, 9, 7, 28, -25, -17, 22, 9, -23, 1, -5, 5, 17, -24, -27, 9, 8, -6, 2, -9, 8, 31, 13, -15, -1, 6, 5, 3, 2, 2, 0, -3, 0, 0, 5, 3, 3, 20, -6, -3, 1, -6, -7, -5, -8, -10, -5, 4, -1, -1, 1, -1, 0, -12, -1, -30, -1, 1, 3, 3, 7, 1, 7, 17, -72, -1, -1, 0, -1, 0, 5, 31, -72, -24, -3, -5, 1, -6, 3, 10, -31, -55, 9, -6, 1, 5, 11, 14, -12, -62, -23, 11, 2, 19, -4, -18, -49, -61, -31, 14, -1, -65, -37, -55, -38, -25, 11, 9, 8, -4, 13, -6, -23, -16, 12, 8, 4, -12, 2, 3, -10, -21, -70, -42, -13, -9, -10, 2, 0, -2, 38, 14, -29, -21, -35, -37, 5, 6, -3, 3, -5, -6, -4, -8, -33, -33, -8, -4, 0, -9, -2, -3, -1, -20, -40, -15, 1, 2, -4, -3, 3, 5, -22, -47, -7, 0, 2, -4, 5, -5, 9, -3, -61, -3, -3, 0, 0, 12, 8, 16, 6, -78, 11, -1, 2, 2, -3, -4, 5, 3, -29, 1, 1, 3, -4, -7, -5, -4, -5, 0, -1, -10, 5, 3, 2, -2, 1, 1, 0, -8, -15, -2, 6, 5, 1, -1, -1, -4, -5, -4, 1, 5, 8, 2, -4, 0, -7, -16, 6, 5, 5, 8, 8, 0, 1, -3, -27, 11, 10, 10, 3, 0, -7, 3, -2, -27, -7, 5, 18, 14, 12, 10, 15, -4, -41, -68, -48, -24, 9, 25, 14, 2, -17, 25, 9, -28, -52, -74, -71, -62, -32, -32, -13, -16, 2, -16, -28, -28, 1, 8, -31, 2, -4, -5, -13, -11, 5, -18, -13, -38, 4, -8, -9, -15, 0, 0, -32, 33, 4, -5, -33, -16, -10, -9, -25, -15, 27, -67, -15, -25, -7, 1, -4, -19, -2, -7, -52, -31, -18, 11, 0, -1, 8, -10, -7, 8, -47, -15, 1, -12, 0, 5, -40, -15, 0, -32, -1, -1, -6, 1, -6, -27, -4, -7, -11, -4, -15, -18, -19, -7, -7, 3, -7, -18, -19, -30, -37, -53, -47, -34, -24, -29, 3, -8, -5, 7, -5, -7, -14, -6, -29, 8, 10, 15, 12, 14, 14, 8, 8, -14, 8, 7, 12, 5, 3, 1, 0, -4, -7, 2, 0, 6, -5, -1, 6, 6, 4, 2, 3, 7, 11, -8, -1, -3, -5, 2, -1, -2, 13, -3, -9, 15, -4, -2, 10, -3, -30, -29, -48, -28, 4, -20, -8, 4, -21, -17, 5, -3, -9, -18, -19, -9, 5, -20, 14, -11, -9, 0, 14, 5, -5, -11, -8, -16, 16, 26, 19, -7, -24, -12, 1, 3, 11, 9, -11, -44, -39, -4, 15, 16, -1, 3, -40, -46, -1, 25, 29, 20, -5, -4, -24, 6, 25, 22, 18, 13, -19, -22, 7, -14, 11, 8, -1, 1, -16, -30, 19, -4, 5, 4, -3, 0, -6, -13, 3, 19, -22, 5, 2, 8, 4, -3, -1, 0, 0, -9, -3, 0, -12, -14, 0, -8, 0, -7, 1, 0, 5, -5, -6, -18, -20, -14, -5, 2, -2, -55, -37, 9, 11, 8, 0, -7, -15, -29, -52, 25, 4, 5, 7, -5, -5, -27, -44, -16, 29, 7, 13, 11, 8, 5, -29, -34, -8, 6, 6, 11, 7, 2, -12, -3, -32, -8, -2, 0, 3, 0, -3, -34, -10, -8, -9, -3, -1, -1, -4, -6, -24, -25, -1, -7, 1, 7, 9, 7, 5, -18, -1, 9, -7, -13, -19, -20, -13, -14, -3, -20, -9, 3, -4, -9, 7, 15, 8, -13, -21, -7, 1, -7, 6, 1, -35, -46, -13, -15, -6, -8, -12, -15, -44, -52, 4, 9, 9, -1, -4, -7, -17, -26, 19, 6, 0, 13, -7, -7, 0, -25, -24, 14, 4, -6, 9, 5, -3, 3, -28, -23, 24, 26, 9, 4, 10, -3, 7, -18, -28, 2, 32, 3, -25, 3, -10, -3, -12, -52, -77, -64, -36, -15, 13, 2, -2, 13, 4, 16, 2, 3, -9, 15, -2, 4, 9, 14, 12, 10, 3, 19, 4, 1, 1, 7, 8, 3, -2, -7, 3, 15, 5, 5, 6, -3, -2, -1, -11, 4, 14, -3, -4, -12, -8, -8, -5, -4, -1, 10, -14, -26, -4, 3, -1, 0, -3, 8, 6, -22, -5, 4, -2, -9, -5, -5, -1, -3, -8, -9, -2, 0, -3, -3, -10, 5, 3, -4, -10, -4, 5, -1, -8, -9, 13, 9, 3, -6, -10, -3, -4, -16, -17, 19, 2, -10, 4, 9, -7, -19, -18, 21, 40, 6, -1, -7, 8, 23, 15, -38, -76, -10, -6, -3, -5, -8, 13, 34, 32, -37, -17, -8, 14, -1, -25, -7, 23, 31, 12, -10, -1, 4, 12, -29, -33, -1, 16, 13, -7, -10, -33, 9, 13, -13, -19, 4, 11, -3, -16, -4, -6, 12, 1, -11, 0, 4, -6, 6, 12, -12, -8, 8, -9, 2, 6, 0, -3, 3, -3, 0, -1, -1, -9, -5, -7};
   char output0[6400];
    Master1 mm_a(mnist, sizeof(char)*784);
    Master2 mm_b(kernel, sizeof(char)*1296);
    Master3 mm_c(kernel, sizeof(char)*1296);
    Master4 mm_d(output0, sizeof(char)*6400); 
   
   convolution(mm_a, mm_b,mm_c, mm_d,  16, 20, 1, 28, 1,0);
   for (int i=0; i<6400; i++) {
      printf("%x ", output0[i]);
   }

   return 0;
}
